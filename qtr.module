<?php

require_once 'qtr.inc';

function qtr_menu() {
  $items = array();

  $items['qtr/demo'] = array(
    'title' => 'QTR demonstration',
    'description' => 'Running QTR on sample data',
    'page callback' => 'qtr_demo',
    'access arguments' => array('access QTR demonstration'),
  );

  $items['qtr/settings'] = array(
    'title' => 'QTR',
    'description' => 'QTR settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('qtr_settings'),
    'access arguments' => array('administer QTR'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function qtr_permission() {
  return array(
    'access QTR demonstration' => array('title' => t('Access QTR demonstration')),
    'administer QTR' => array('title' => t('Administer QTR')),
  );
}

function qtr_settings($form, &$form_state) {
  $form['params'] = array(
    '#type' => 'fieldset',
    '#title' => t('Parameters'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['params']['qtr_delta'] = array(
    '#type' => 'textfield',
    '#title' => t('Delta'),
    '#description' => t('N.B.: if the effective number of AGENTS/ITEMS is lower (i.e. if there are gaps in the input file), the renormalization of the algorithm has to change. Better to have no gaps!'),
    '#default_value' => variable_get('qtr_delta', 0.00000000001),
  );

  $form['params']['qtr_w_upload'] = array(
    '#type' => 'textfield',
    '#title' => t('Weight of upload action'),
    '#default_value' => variable_get('qtr_w_upload', 1.0),
  );

  $form['params']['qtr_w_download'] = array(
    '#type' => 'textfield',
    '#title' => t('Weight of download action'),
    '#default_value' => variable_get('qtr_w_download', 0.1),
  );

  $form['params']['qtr_w_view'] = array(
    '#type' => 'textfield',
    '#title' => t('Weight of view action'),
    '#default_value' => variable_get('qtr_w_view', 0.05),
  );

  $form['params']['qtr_decay'] = array(
    '#type' => 'select',
    '#title' => t('Time-decay of scores'),
    '#options' => array(0 => 'no decay', 1 => 'power-decay', 2 => 'exponential decay', 3 => 'theta-decay'),
    '#default_value' => variable_get('qtr_decay', 0),
  );

  $form['params']['qtr_tau0'] = array(
    '#type' => 'textfield',
    '#title' => t('Time scale of the decay'),
    '#default_value' => variable_get('qtr_tau0', 50),
  );

  $form['params']['qtr_renorm_q'] = array(
    '#type' => 'textfield',
    '#title' => t('Renormalization of quality'),
    '#default_value' => variable_get('qtr_renorm_q', 0),
  );

  $form['params']['qtr_renorm_r'] = array(
    '#type' => 'textfield',
    '#title' => t('Renormalization of reputation'),
    '#default_value' => variable_get('qtr_renorm_r', 0),
  );

  $form['params']['qtr_renorm_t'] = array(
    '#type' => 'textfield',
    '#title' => t('Renormalization of trust'),
    '#default_value' => variable_get('qtr_renorm_t', 0),
  );

  $form['params']['qtr_resc_q'] = array(
    '#type' => 'textfield',
    '#title' => t('Rescaled quality'),
    '#default_value' => variable_get('qtr_resc_q', 0),
  );

  $form['params']['qtr_resc_r'] = array(
    '#type' => 'textfield',
    '#title' => t('Rescaled reputation'),
    '#default_value' => variable_get('qtr_resc_r', 0),
  );

  $form['params']['qtr_resc_t'] = array(
    '#type' => 'textfield',
    '#title' => t('Rescaled trust'),
    '#default_value' => variable_get('qtr_resc_t', 0),
  );

  return system_settings_form($form);
}

function qtr_demo() {
  qtr_from_file(drupal_get_path('module', 'qtr') . '/EF_complete_new.dat');
  return '';
}

function qtr_from_file($user_item, $trust = NULL) {
  $agent = $item = NULL;
  _qtr_init($agent, $item, 50, 1000);
  _qtr_read($agent, $item, $user_item, $trust);
  _qtr_calculate($agent, $item, $trust, 695);
  
  //write the result of reputation of user and quality of paper into files
  $path_agents = drupal_get_path('module', 'qtr') . "/agent_file";
  $path_items = drupal_get_path('module', 'qtr') . "/item_file";
  
  _qtr_save($agent, $item, $path_agents,$path_items);
}

/*
 * Implemens hook_block_info
 */
function qtr_block_info(){
    $blocks['popular'] = array(
        'info' => t('Popular content'),
        'region' => 'sidebar_first',
        'status' => TRUE
    );
    return $blocks;
}

/*
 * Implements hook_block_configure
 */
function qtr_block_configure($delta = '') {
  if ($delta == 'popular') {
    $posttype = array ();$default = array();
    foreach (node_type_get_types() as $type => $type_obj) {
            $posttype[$type] = $type_obj->name;
            if(variable_get('popular_block_'.$type,0)){
              $default[]=$type;
            }
    }
    $form['content_type'] = array(
      '#type' => 'checkboxes', 
      '#title' => t('Content type to display'), 
      '#options' => $posttype,
      '#default_value' => $default,
    );
    return $form;
  }
  
/*
 * Implements hook_block_save
 */
function qtr_block_save($delta, $edit = array()) {
  if ($delta == 'popular') {
   foreach($edit['content_type'] as $type){
      variable_set('popular_block_'.$type, $type);
   }
  }
}
}

/*
 * Implements hook_block_view
 */
function qtr_block_view($delta = ''){
  if($delta == 'popular'){
      $node_rep = drupal_get_path('module', 'qtr') . "/item_file"; 
      $showlist=array();$count=0;
      if(file_exists($node_rep)){
       $ifs = file($node_rep);
        foreach ($ifs as $line) {
          $words = explode("\t", $line);
          $i = (int) $words[0];
          $node=node_load($i);
          $isselect=0;
          if($node){
            $isselect=variable_get('popular_block_'.$node->type,0);
          }
          if($isselect){
            $showlist[]=$node;
            $count++;
          }
          if($count>=5||$words[1]==0)
              break;
        }
    }
    $blocks['subject'] = 'Popular content';
    $contents = '<div class="item-list"><ul>';
    foreach($showlist as $list){
            $contents .= '<li><a href="node/'.$list->nid.'" target="_blank">'.$list->title."</a></li>";
    }
     $contents .= '</ul></div>';
     $blocks['content'] = $contents;
     return $blocks;
  }
    
    
}

