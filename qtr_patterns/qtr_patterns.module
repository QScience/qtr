<?php
/**
 * @file
 * Hook functions for Patterns integration
 */

function qtr_patterns($data = NULL) {

  $tags['qtr_parameters']=array(
    PATTERNS_INFO   => t('qtr parameters'),
    PATTERNS_MODIFY => array('qtr_settings'),
    PATTERNS_EXPORT => array(PATTERNS_EXPORT_ALL => 'qtr_patterns_export_parameters', ),
    );

  $tags['qtr_item']=array(
    PATTERNS_INFO   => t('qtr item'),
    PATTERNS_MODIFY => array('qtr_set_form'),
    PATTERNS_EXPORT => array(PATTERNS_EXPORT_ALL => 'qtr_patterns_export_item', ),
    );

  return $tags;
}

function qtr_patterns_export_item($args = NULL, $result = NULL) {
  $item = array();

  $item['tag'] = 'qtr_item';
  $item['contenttype'] = array();

  foreach (node_type_get_types() as $type => $type_obj) {
      $item['contenttype'][] = $type_obj->name;
  }

  $actions = array();

  switch ($args['type']) {
    case PATTERNS_MODIFY :
      $action = array(PATTERNS_MODIFY => $item);
      array_push($actions, $action);
      break;
  }

  return $actions;
}

function qtr_patterns_export_parameters($args = NULL, $result = NULL) {

  $params = array();

  $params['tag'] = 'qtr_parameters';
  $params['qtr_delta'] = variable_get('qtr_delta', 0.00000000001);
  $actions = qtr_get_actiontype();
  if ($actions) {
      foreach ($actions as $action) {
        $params['qtr_w_' . $action->action]=$action->weight;
      }
  }
  $params['qtr_decay'] = variable_get('qtr_decay', 0);
  $params['qtr_tau0'] = variable_get('qtr_tau0', 50);
  $params['qtr_renorm_q'] = variable_get('qtr_renorm_q', 0);
  $params['qtr_renorm_r'] = variable_get('qtr_renorm_r', 0);
  $params['qtr_renorm_t'] = variable_get('qtr_renorm_t', 0);
  $params['qtr_resc_q'] = variable_get('qtr_resc_q', 0);
  $params['qtr_resc_r'] = variable_get('qtr_resc_r', 0);
  $params['qtr_resc_t'] = variable_get('qtr_resc_t', 0);

  $actions = array();

  switch ($args['type']) {
    case PATTERNS_MODIFY :
      $action = array(PATTERNS_MODIFY => $params);
      array_push($actions, $action);
      break;
  }

  return $actions;
}

/**
 * hook_patterns_prepare()
 */
function qtr_patterns_prepare($action, $tag, &$data) {
  return patterns_results();
}

function qtr_patterns_validate($action, $tag, &$data) {

  $result = array();
  $status = PATTERNS_SUCCESS;
  $msg = '';
  switch ($tag) {
    // qtr_parameters tag.
    case 'qtr_parameters' :
      switch ($action) {
        case PATTERNS_MODIFY :
          $params = array();
          $params[] = 'qtr_delta';
          $param_type = qtr_get_actiontype();
          if ($param_type) {
              foreach ($param_type as $pt ) {
                $params[] = 'qtr_w_' . $pt ->action;
              }
          }
          $params[] = 'qtr_decay';
          $params[] = 'qtr_tau0';
          $params[] = 'qtr_renorm_q';
          $params[] = 'qtr_renorm_r';
          $params[] = 'qtr_renorm_t';
          $params[] = 'qtr_resc_q';
          $params[] = 'qtr_resc_r';
          $params[] = 'qtr_resc_t';

          $msg = 'these keys are not existed in system: ';
          $count = 0;
          foreach ($data as $key => $value) {
            if (!in_array($key, $params)) {
              unset($data[$key]);
              $result[] = array(PATTERNS_WARNING_ELEMENT_UNDEFINED => t('Not valid Key: %k', array('%k' => $key)), );
            }
            else {
              $count++;
            }
          }
          if (count == 0) {
            $msg = 'no valid keys.';
            $status = PATTERNS_ERR;
            return patterns_results($status, $msg, $result);
          }

        break;
      }
      break;
    //qtr_item
    case 'qtr_item' :
      switch ($action) {
        case PATTERNS_MODIFY :
          unset($data['content_type']);
          $content_type_Now = node_type_get_types();
          if (isset($data['contenttype'])) {
            foreach ($data['contenttype'] as $key => $value) {
              $sign = FALSE;
              foreach ($content_type_Now as $type => $type_obj) {
                if ($value==$type_obj->name) {
                  $data['content_type'][]=$type;
                  $sign = TRUE;
                  break;
                }
              }
              if (!$sign) {
                $result[] = array(PATTERNS_WARNING_ELEMENT_UNDEFINED => t('Not valid value: %k', array('%k' => $value)));
              }
            }
          }

          if (!isset($data['content_type']) || !count($data['content_type'])) {
            $msg = 'Mandatory data content_type is missing';
            $status = PATTERNS_ERR;
            return patterns_results($status, $msg, $result);
          }
          break;
      }
      break;

  }
  return patterns_results($status, $msg, $result);
}

/**
 * hook_patterns_build()
 */
function qtr_patterns_build($action, $form_id, &$data = NULL, &$a) {
  module_load_include('module', 'qtr', 'qtr');
  return patterns_results(PATTERNS_SUCCESS, t('Execution successful(in build function)'), $data);
}

/**
 * hook_patterns_cleanup()
 */
function qtr_patterns_cleanup($action, $tag, &$data) {
  return patterns_results();
}
